import { join } from "node:path";
import { fileURLToPath } from "node:url";
import { generateSW, } from "workbox-build";
function isInjectManifest(workboxConfig) {
    return !!workboxConfig && "swSrc" in workboxConfig;
}
const PKG_NAME = "astrojs-service-worker";
const createPlugin = (options = {}) => {
    const SW_NAME = "service-worker.js";
    return {
        name: PKG_NAME,
        hooks: {
            "astro:config:setup": ({ command, injectRoute, injectScript }) => {
                const autoRegister = options.registration?.autoRegister ?? true;
                if (autoRegister) {
                    injectScript("head-inline", `\
if ('serviceWorker' in navigator) {
  navigator.serviceWorker.register('/${SW_NAME}');
}`);
                }
                const enableInDevelopment = options.enableInDevelopment ?? false;
                const isDevelopment = command === "dev";
                if (!enableInDevelopment && isDevelopment) {
                    injectRoute({
                        pattern: `/${SW_NAME}`,
                        entryPoint: fileURLToPath(new URL("./service-worker.js.js", import.meta.url)),
                    });
                }
            },
            "astro:build:done": async ({ dir }) => {
                if (isInjectManifest(options.workbox)) {
                    console.error("[astrojs-service-worker] injectManifest is not supported at this time. If you would like it to be supported, please open an issue at https://github.com/tatethurston/astrojs-service-worker/issues/new");
                    return;
                }
                const out = fileURLToPath(dir);
                const defaults = {
                    cleanupOutdatedCaches: true,
                    clientsClaim: true,
                    globDirectory: out,
                    globPatterns: ["**/*"],
                    skipWaiting: true,
                    sourcemap: false,
                    swDest: join(out, SW_NAME),
                };
                try {
                    await generateSW({
                        ...defaults,
                        ...options.workbox,
                    });
                }
                catch (e) {
                    console.error(e);
                }
            },
        },
    };
};
export default createPlugin;
